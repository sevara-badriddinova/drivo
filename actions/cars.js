import { auth } from "@clerk/nextjs/dist/types/server";
import { GoogleGenerativeAI } from "@google/generative-ai";
import { createClient } from "@supabase/supabase-js";
import { db } from "@/lib/prisma";
import { revalidatePath } from "next/cache";

// function to convert file to base64
async function fileToBase64(file){
    // convert file into raw bytes
    const bytes = await file.arrayBuffer();
    // create a node.js buffer from those files
    const buffer = Buffer.from(bytes);
    // convert buffer into base64 string
    return buffer.toString("base64");
}

// returns details about a car
export async function processCarImageAI(file){
    try{
        // check if API key is available
        if(!process.env.GEMINI_API_KEY){
            throw new Error("Gemini API key is not configured");
        }
        // connecting to Gemini API 
        const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY)
        const model = genAI.getGenerativeModel({model:"gemini-2.0"})

        // converting into 64 bit
        const base64Image = await fileToBase64(file);

        const imagePart = {
            inlineData:{
                data:base64Image, 
                mimeType: file.type,
            },
        };

        // writing the prompt
        const prompt = `
            Analyze this car image and extract the following information: 
            1. Make (manufacturer)
            2. Model 
            3. Year (approximately)
            4. Color
            5. Body Type (SUV, Sedan, Hatchback, etc.)
            6. Mileage
            7. Fuel type (your best guess)
            8. Transmission type (your best guess)
            9. Price (your best guess)
            10. Short description as to be added to a car listing
        
        Format your response as a clean JSON object with these fields: 
            {
                "make": "",
                "model": "",
                "year": 0000,
                "color": "",
                "price": "",
                "mileage": "",
                "bodyType": "",
                "fuelType": "",
                "transmission": "",
                "description": "",
                "confidence": 0.0,
            }
            For confidence, provide a value between 0 and 1 representing how confident you are in your 
            overall identification. 
            Only respond with the JSON object, nothing else.
        `;
        // send the image and prompt to gemini and get back raw response
        const result = await model.generateContent([imagePart, prompt])
        const response = await result.response; 
        const text = response.text();
        // trimming from ``` generated by gemini
        const cleanedText = text.replace(/```(?:json)?\n?/g, "").trim();

        try{
            const carDetails = JSON.parse(cleanedText);
            const requiredFields = [
                "make", 
                "model", 
                "year", 
                "color", 
                "bodyType", 
                "price", 
                "mileage", 
                "fuelType", 
                "transmission", 
                "description", 
                "confidence",
            ];
            // checking if gemini forgot any required fields
            const missingFields = requiredFields.filter(
                (field) => !(field in carDetails)
            );
            // throw an error if forgot any
            if (missingFields.length > 0){
                throw new Error(
                    `AI response missing required fields: ${missingFields.join(", ")}`
                );
            }
            // return the result
            return {
                success: true, 
                data: carDetails,
            }
        }catch(error){
            console.error("Failed to parse AI response: ", parseError);
            return {
                success: false, 
                error: "Failed to parse AI response",
            };
        }
    }catch(error){
        throw new Error("Gemini API Error " + error.message);
    }
}

export async function addCar({carData, images}){
    try{
        const {userId} = await auth();
        if(!userId) throw new Error("Unauthorized");
        const user = await db.user.findUnique({
            where: { clerkUserId: userId },
        });
        if (!user) throw new Error("User not found");
        const carId = uuidv4();
        const folderPath = `cars/${carId}`;

        const cookieStore = await cookies();
        const supabase = createClient(cookieStore);

        const imageUrls = [];

        for(let i = 0; i < images.length; i++){
            const base64Data = images[i];
        
            // skip if image data is not valid
            if(!base64Data || !base64Data.startsWith("data:image/")){
                console.warn("Skipping invalid image data");
                continue;
            }
            // extract the base64 part (remove the data/xyz;base64, prefix)
            const base64 = base64Data.split(",")[1];
            const imageBuffer = Buffer.from(base64, "base64");

            // determine file extension from the data URL
            const mimeMatch = base64Data.match(/data:image\/([a-zA-Z0-9]+);/);
            const fileExtension = mimeMatch ? mimeMatch[1] : "jpeg";

            // create filename
            const fileName = `image-${Date.now()}-${i}.${fileExtension}`;
            const filePath = `${folderPath}/${fileName}`;

            await supabase.storage.from("car-images").upload(filePath, imageBuffer, {
                contentType: `image/${fileExtension}`,
            });

            if(error){
                console.error("Error uploading image", error);
                throw new Error(`Failed to upload image: ${error.message}`);
            }

            const publicUrl = `${process.env.NEXT_PUBLIC_SUPABASE_URL}/storage/v1/object/public/car-images/
            ${filePath}`;

            imageUrls.push(publicUrl);

            if (imageUrls.length===0){
                throw new Error("No valid images were uploaded");
            }

            const car = await db.car.create({
                data:{
                    id: carId, 
                    make: carData.make,
                    model: carData.model,
                    year: carData.price, 
                    mileage: carData.mileage,
                    color: carData.color,
                    fuelType: carData.fuelType,
                    transmission: carData.transmission,
                    bodyType: carData.bodyType,
                    seats: carData.seats,
                    description: carData.description,
                    status: carData.status, 
                    featured: carData.featured,
                    images: imageUrls // store the array of image urls
                },
            });
        }
        revalidatePath('/admin/cars')
        return {
            success: true,
        };
    }catch(error){
        throw new Error("Error adding car: " + error.message);
    }
}